// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RespOk struct {
	SuccessId            int32    `protobuf:"varint,1,opt,name=success_id,json=successId,proto3" json:"success_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespOk) Reset()         { *m = RespOk{} }
func (m *RespOk) String() string { return proto.CompactTextString(m) }
func (*RespOk) ProtoMessage()    {}
func (*RespOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *RespOk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RespOk.Unmarshal(m, b)
}
func (m *RespOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RespOk.Marshal(b, m, deterministic)
}
func (m *RespOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespOk.Merge(m, src)
}
func (m *RespOk) XXX_Size() int {
	return xxx_messageInfo_RespOk.Size(m)
}
func (m *RespOk) XXX_DiscardUnknown() {
	xxx_messageInfo_RespOk.DiscardUnknown(m)
}

var xxx_messageInfo_RespOk proto.InternalMessageInfo

func (m *RespOk) GetSuccessId() int32 {
	if m != nil {
		return m.SuccessId
	}
	return 0
}

type RespError struct {
	ErrorId              int32    `protobuf:"varint,1,opt,name=error_id,json=errorId,proto3" json:"error_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RespError) Reset()         { *m = RespError{} }
func (m *RespError) String() string { return proto.CompactTextString(m) }
func (*RespError) ProtoMessage()    {}
func (*RespError) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *RespError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RespError.Unmarshal(m, b)
}
func (m *RespError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RespError.Marshal(b, m, deterministic)
}
func (m *RespError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespError.Merge(m, src)
}
func (m *RespError) XXX_Size() int {
	return xxx_messageInfo_RespError.Size(m)
}
func (m *RespError) XXX_DiscardUnknown() {
	xxx_messageInfo_RespError.DiscardUnknown(m)
}

var xxx_messageInfo_RespError proto.InternalMessageInfo

func (m *RespError) GetErrorId() int32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

type Req struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{2}
}

func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (m *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(m, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Resp struct {
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	// Types that are valid to be assigned to Resp:
	//	*Resp_RespOk
	//	*Resp_RespError
	Resp                 isResp_Resp `protobuf_oneof:"Resp"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Resp) Reset()         { *m = Resp{} }
func (m *Resp) String() string { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()    {}
func (*Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{3}
}

func (m *Resp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resp.Unmarshal(m, b)
}
func (m *Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resp.Marshal(b, m, deterministic)
}
func (m *Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resp.Merge(m, src)
}
func (m *Resp) XXX_Size() int {
	return xxx_messageInfo_Resp.Size(m)
}
func (m *Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Resp proto.InternalMessageInfo

func (m *Resp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type isResp_Resp interface {
	isResp_Resp()
}

type Resp_RespOk struct {
	RespOk *RespOk `protobuf:"bytes,2,opt,name=RespOk,proto3,oneof"`
}

type Resp_RespError struct {
	RespError *RespError `protobuf:"bytes,3,opt,name=RespError,proto3,oneof"`
}

func (*Resp_RespOk) isResp_Resp() {}

func (*Resp_RespError) isResp_Resp() {}

func (m *Resp) GetResp() isResp_Resp {
	if m != nil {
		return m.Resp
	}
	return nil
}

func (m *Resp) GetRespOk() *RespOk {
	if x, ok := m.GetResp().(*Resp_RespOk); ok {
		return x.RespOk
	}
	return nil
}

func (m *Resp) GetRespError() *RespError {
	if x, ok := m.GetResp().(*Resp_RespError); ok {
		return x.RespError
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Resp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Resp_RespOk)(nil),
		(*Resp_RespError)(nil),
	}
}

func init() {
	proto.RegisterType((*RespOk)(nil), "pb.RespOk")
	proto.RegisterType((*RespError)(nil), "pb.RespError")
	proto.RegisterType((*Req)(nil), "pb.Req")
	proto.RegisterType((*Resp)(nil), "pb.Resp")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x51, 0x4b, 0x85, 0x30,
	0x14, 0xc7, 0xef, 0xae, 0x37, 0xbd, 0x9e, 0x08, 0xe2, 0xbc, 0xa4, 0x85, 0x20, 0x23, 0xca, 0x97,
	0xc4, 0xb4, 0x4f, 0x10, 0x04, 0xfa, 0x14, 0xac, 0x0f, 0x10, 0xa8, 0x23, 0x24, 0xca, 0xb9, 0x69,
	0x6f, 0x7d, 0xf7, 0xd8, 0x74, 0x18, 0x5c, 0xdf, 0xce, 0xfe, 0xbf, 0xdf, 0xd9, 0xfe, 0x0c, 0x60,
	0xe4, 0x6a, 0x4c, 0x85, 0xec, 0xc7, 0x1e, 0xf7, 0xa2, 0xa6, 0xf7, 0xe0, 0x32, 0xae, 0xc4, 0xeb,
	0x27, 0x46, 0x00, 0x6a, 0x6a, 0x1a, 0xae, 0xd4, 0x7b, 0xd7, 0x06, 0x24, 0x26, 0xc9, 0x19, 0xf3,
	0x97, 0xa4, 0x6a, 0xe9, 0x1d, 0xf8, 0x5a, 0x7c, 0x91, 0xb2, 0x97, 0x18, 0xc2, 0x91, 0xeb, 0x61,
	0x35, 0x3d, 0x73, 0xae, 0x5a, 0x7a, 0x05, 0x0e, 0xe3, 0x03, 0x5e, 0x82, 0xf3, 0xa5, 0x3e, 0x0c,
	0xf4, 0x99, 0x1e, 0xe9, 0x04, 0x07, 0x7d, 0xc1, 0x29, 0xc1, 0x5b, 0xdb, 0x21, 0xd8, 0xc7, 0x24,
	0x39, 0xcf, 0x21, 0x15, 0x75, 0x3a, 0x27, 0xe5, 0x8e, 0xd9, 0x7e, 0x0f, 0xff, 0x0a, 0x04, 0x8e,
	0x11, 0x2f, 0xac, 0x68, 0xc2, 0x72, 0xc7, 0x56, 0xe3, 0xd9, 0x9d, 0x9f, 0xcb, 0x7f, 0xc1, 0x7b,
	0xe3, 0xf2, 0xa7, 0x6b, 0x38, 0x86, 0x70, 0x60, 0xd3, 0xf7, 0x23, 0x7a, 0xf3, 0xda, 0x70, 0x7d,
	0xb4, 0xfb, 0x78, 0x63, 0x50, 0xbe, 0x81, 0x32, 0xb2, 0xc0, 0x62, 0x03, 0x26, 0x04, 0x23, 0x03,
	0x9f, 0x36, 0x61, 0x46, 0x6a, 0xd7, 0x7c, 0x75, 0xf1, 0x17, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x28,
	0x90, 0x55, 0x78, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	Run1(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	Run2(ctx context.Context, in *Req, opts ...grpc.CallOption) (Service_Run2Client, error)
	Run3(ctx context.Context, opts ...grpc.CallOption) (Service_Run3Client, error)
	Run4(ctx context.Context, opts ...grpc.CallOption) (Service_Run4Client, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Run1(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/pb.Service/Run1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Run2(ctx context.Context, in *Req, opts ...grpc.CallOption) (Service_Run2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[0], "/pb.Service/Run2", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceRun2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_Run2Client interface {
	Recv() (*Resp, error)
	grpc.ClientStream
}

type serviceRun2Client struct {
	grpc.ClientStream
}

func (x *serviceRun2Client) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) Run3(ctx context.Context, opts ...grpc.CallOption) (Service_Run3Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[1], "/pb.Service/Run3", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceRun3Client{stream}
	return x, nil
}

type Service_Run3Client interface {
	Send(*Req) error
	CloseAndRecv() (*Resp, error)
	grpc.ClientStream
}

type serviceRun3Client struct {
	grpc.ClientStream
}

func (x *serviceRun3Client) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceRun3Client) CloseAndRecv() (*Resp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) Run4(ctx context.Context, opts ...grpc.CallOption) (Service_Run4Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[2], "/pb.Service/Run4", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceRun4Client{stream}
	return x, nil
}

type Service_Run4Client interface {
	Send(*Req) error
	Recv() (*Resp, error)
	grpc.ClientStream
}

type serviceRun4Client struct {
	grpc.ClientStream
}

func (x *serviceRun4Client) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceRun4Client) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	Run1(context.Context, *Req) (*Resp, error)
	Run2(*Req, Service_Run2Server) error
	Run3(Service_Run3Server) error
	Run4(Service_Run4Server) error
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) Run1(ctx context.Context, req *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run1 not implemented")
}
func (*UnimplementedServiceServer) Run2(req *Req, srv Service_Run2Server) error {
	return status.Errorf(codes.Unimplemented, "method Run2 not implemented")
}
func (*UnimplementedServiceServer) Run3(srv Service_Run3Server) error {
	return status.Errorf(codes.Unimplemented, "method Run3 not implemented")
}
func (*UnimplementedServiceServer) Run4(srv Service_Run4Server) error {
	return status.Errorf(codes.Unimplemented, "method Run4 not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Run1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Run1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Service/Run1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Run1(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Run2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Req)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).Run2(m, &serviceRun2Server{stream})
}

type Service_Run2Server interface {
	Send(*Resp) error
	grpc.ServerStream
}

type serviceRun2Server struct {
	grpc.ServerStream
}

func (x *serviceRun2Server) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_Run3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Run3(&serviceRun3Server{stream})
}

type Service_Run3Server interface {
	SendAndClose(*Resp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type serviceRun3Server struct {
	grpc.ServerStream
}

func (x *serviceRun3Server) SendAndClose(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceRun3Server) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_Run4_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Run4(&serviceRun4Server{stream})
}

type Service_Run4Server interface {
	Send(*Resp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type serviceRun4Server struct {
	grpc.ServerStream
}

func (x *serviceRun4Server) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceRun4Server) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run1",
			Handler:    _Service_Run1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run2",
			Handler:       _Service_Run2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Run3",
			Handler:       _Service_Run3_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Run4",
			Handler:       _Service_Run4_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}
